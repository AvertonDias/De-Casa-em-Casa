
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // =================================
    //         FUNÇÕES GLOBAIS
    // =================================
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isUserInCongregation(congregationId) {
      return isUserAuthenticated() && getUserData().congregationId == congregationId;
    }
    
    function getUserRole() {
      return getUserData().role;
    }

    function isAdmin() {
      return isUserAuthenticated() && getUserRole() == 'Administrador';
    }

    function isManager() {
      let role = getUserRole();
      return isUserAuthenticated() && (role == 'Administrador' || role == 'Dirigente');
    }

    // =================================
    //         REGRAS GERAIS
    // =================================

    // Coleção de Congregações
    match /congregations/{congId} {
      allow read: if isManager() && isUserInCongregation(congId);
      allow update: if isAdmin() && isUserInCongregation(congId);
      // A criação é feita via Cloud Function, mas permitimos a leitura pública para buscar o ID da congregação no cadastro.
      allow get: if isUserAuthenticated();
      allow list: if false; // Ninguém pode listar todas as congregações
      allow create, delete: if false; // Apenas via Cloud Functions
    }

    // Coleção de Usuários
    match /users/{userId} {
      // LEITURA: Um usuário pode ler seu próprio perfil ou se for um gerente da mesma congregação.
      allow read: if isUserOwner(userId) || (isManager() && isUserInCongregation(get(/databases/$(database)/documents/users/$(userId)).data.congregationId));
      
      // ATUALIZAÇÃO: Um usuário pode atualizar seu próprio perfil, ou um gerente pode atualizar perfis da mesma congregação.
      allow update: if isUserOwner(userId) || 
                      (isManager() && isUserInCongregation(resource.data.congregationId) && 
                       // Impede que Dirigentes promovam alguém a Administrador
                       !(request.resource.data.role == 'Administrador' && getUserRole() == 'Dirigente'));

      // CRIAÇÃO: Um usuário só pode criar seu próprio documento de usuário. Essencial para o fluxo de cadastro.
      allow create: if request.auth.uid == userId;
      
      // EXCLUSÃO: Apenas administradores podem excluir usuários (e não a si mesmos), feito via Cloud Function.
      allow delete: if false;
    }

    // Subcoleções de Territórios e Quadras
    match /congregations/{congId}/{path=**} {
       allow read: if isManager() && isUserInCongregation(congId);
       allow write: if isManager() && isUserInCongregation(congId);
    }
    
    // Regra específica e mais permissiva para a subcoleção de casas, permitindo que publicadores modifiquem
    match /congregations/{congId}/territories/{territoryId}/quadras/{quadraId}/casas/{casaId} {
      allow read, write: if isUserInCongregation(congId);
    }
  }
}
